def Dette_convertible(three, q, M, n, r, sigma, theta, h, y, T) :
        
    option_three = three.copy()
    
    for i in range (0, n + 1) :    
        x = three[i*2, n]
        if x >= M/q :
            option_three[i*2, n] = x * q
        elif M/q > x >= M :
            option_three[i*2, n] = M
        else :
            option_three[i*2, n] = theta * x

    u = np.exp(sigma * np.sqrt(h))
    d = np.exp(-sigma * np.sqrt(h))
    pi = (np.exp((r-y)*h) - d) / (u-d)

    for i in range (1, n + 1) :
        for j in range (0, n-i+1) :
            option_three[i + j * 2, n - i] = np.maximum((pi * option_three[i-1+j*2,n-i+1] + (1-pi) * option_three[i+1+j*2,n-i+1]) * np.exp(-r*h), three[i+j*2, n-i] * q)

    D = option_three
        

    return D
